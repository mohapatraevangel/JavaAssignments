package factory;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class ConnectionFactory {

    // Singleton pattern can be implemented if necessary, but generally, returning a new connection each time is preferred
    public static Connection getConnection() {
        Connection connection = null;
        InputStream is = null;

        try {
            // Load the properties file using ClassLoader
            is = ConnectionFactory.class.getClassLoader().getResourceAsStream("dbConnection.properties");

            // Check if properties file exists
            if (is == null) {
                throw new RuntimeException("Property file 'dbConnection.properties' not found in the classpath.");
            }

            Properties properties = new Properties();
            properties.load(is);

            // Get the properties from the file
            String url = properties.getProperty("jdbc.url");
            String username = properties.getProperty("jdbc.username");
            String password = properties.getProperty("jdbc.password");
            String driverName = properties.getProperty("jdbc.drivername");

            // Load the JDBC driver class
            try {
                Class.forName(driverName);
                System.out.println("JDBC Driver loaded successfully.");
            } catch (ClassNotFoundException e) {
                throw new RuntimeException("JDBC Driver not found.", e);
            }

            // Establish the connection
            connection = DriverManager.getConnection(url, username, password);
            System.out.println("Database connected successfully.");

        } catch (SQLException e) {
            throw new RuntimeException("Error establishing database connection.", e);
        } catch (Exception e) {
            throw new RuntimeException("Error reading properties file or loading JDBC driver.", e);
        } finally {
            // Close the InputStream resource
            try {
                if (is != null) {
                    is.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return connection;
    }
}
